@model OutlayChartViewModel

@{
    ViewData["Title"] = "Home Page";
}

<form method="post">
    <div class="row">
        <div class="col-3">
           <div class="p-3 mt-4 row">
                <div class="col-12 mb-3 pb-2">
                    <h2 class="text-primary">Filters</h2>
                    <hr/>
                </div>
                <h5>Outlays Date</h5>
                <div class="mb-3">
                    <select asp-for="@Model.SelectedYear" asp-items="@Model.YearsList" class="form-select">
                        <option disabled selected>--Select Year--</option>
                    </select>
                </div>
                <div class="mb-3">
                    <select asp-for="@Model.SelectedMonth" asp-items="@Model.MonthList" class="form-select">
                        <option disabled selected>--Select Year--</option>
                    </select>
                </div>
                <h5>Categories</h5>
                <div class="mb-3">
                    <ul class="scrollBar">
                        @foreach (var categoryName in Model.CurrentMonthCategoryOutlays.Keys)
                        {
                            <div>
                                <input type="checkbox" id="@categoryName" onchange="categoryOnChanged(this)" checked/>
                                <label class="text-secondary">@categoryName</label>
                            </div>   
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-9">
            <div class="border p-3 mt-4 row">
                <div class="row col-12 mb-3 pb-2">
                    <div class="col-6">
                        <h2 class="text-primary">Your Spendings</h2>
                    </div>
                    <div class="col-6 text-end">
                        <h2 class="text-secondary">@Model.OutlaysData</h2>
                    </div>
                    <hr class="m-2" />
                </div>
                <div class="mb-3 col-6">
                    <canvas id="userCategoryOutlaysPie" style="width:100%;max-width:600px"></canvas>
                </div>
                <div class="mb-3 col-6">
                    <canvas id="userCategoryOutlaysBar" style="width:100%;max-width:600px"></canvas>
                </div>
                <div class="container my-custom-scrollbar table-wrapper-scroll-y">
                    <table class="table table-bordered table-striped" style="width:100%">
                        <thead>
                            <tr>
                                <th> Name </th>
                                <th class="text-center"> Cost </th>
                                <th class="text-center"> Category </th>
                                <th class="text-center"> Date </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var outlay in Model.CurrentMonthOutlays)
                            {
                                <tr>
                                    <td> @outlay.Name </td>
                                    <td class="text-center"> @outlay.Cost.ToString("c") </td>
                                    <td class="text-center"> @outlay.Category.Name </td>
                                    <td class="text-center"> @outlay.CreatedDate.ToString("MM/dd/yyyy") </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</form>



@section Scripts
{
    <script type="text/javascript">
        var categories = [];
        var categoryOutlays = [];
        var colors = [];

        var removedCategories = [];
        var removedOutlays = [];

        var pieChart;
        var barChart;

        setupChartSpendings();

        function generateRandomColor() {
          var letters = '0123456789ABCDEF';
          var color = '#';
          for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
          }
          return color;
        }

        function generateListOfColors(count){
            let colors = [];
            for (var i = 0; i < count; ++i){
                colors.push(generateRandomColor());
            }
            return colors;
        }

        function setupChartSpendings(){
            var result = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CurrentMonthCategoryOutlays));
            for (var key in result){
                categories.push(key);
                categoryOutlays.push(result[key]);
            }
            colors = generateListOfColors(Object.keys(result).length);
            loadPieChart();
            loadBarChart();
            
        }

        function loadPieChart(){
            pieChart = new Chart("userCategoryOutlaysPie", {
              type: "pie",
              data: {
                labels: categories,
                datasets: [{
                  backgroundColor: colors,
                  data: categoryOutlays
                }]
              },
              options: {
              }
            });
        }

        function loadBarChart(){
            barChart = new Chart("userCategoryOutlaysBar", {
              type: "bar",
              data: {
                labels: categories,
                datasets: [{
                  backgroundColor: colors,
                  data: categoryOutlays
                }]
              },
              options: {
                legend: {display: false},
                scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
              }
            });
        }

        function destroyCharts(){
            pieChart.destroy();
            barChart.destroy();
        }

        function categoryOnChanged(checkbox){
            if($(checkbox).is(":checked")){
                var removedCategory = removedCategories.indexOf(checkbox.id);
                if (removedCategory != -1){
                    categories.push(removedCategories[removedCategory]);
                    categoryOutlays.push(removedOutlays[removedCategory]);

                    removedCategories.splice(removedCategory, 1);
                    removedOutlays.splice(removedCategory, 1);

                    destroyCharts();
                    loadPieChart();
                    loadBarChart();
                }
            }else{
                var categoryIndex = categories.indexOf(checkbox.id);
                if (categoryIndex != -1){
                    removedCategories.push(categories[categoryIndex]);
                    removedOutlays.push(categoryOutlays[categoryIndex]);

                    categories.splice(categoryIndex, 1);
                    categoryOutlays.splice(categoryIndex, 1);

                    destroyCharts();
                    loadPieChart();
                    loadBarChart();
                }
            }
        }
    </script>
}